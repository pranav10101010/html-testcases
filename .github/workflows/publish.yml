name: Convert HTML Report to JUnit

on:
  workflow_dispatch:   # run manually, you can also add `push` if you want

jobs:
  convert:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - run: pip install beautifulsoup4 lxml

      - name: Convert HTML to JUnit XML
        run: |
          python <<'EOF'
          import xml.etree.ElementTree as ET
          from bs4 import BeautifulSoup

          def parse_time(s):
              if not s or s.strip() in ["-", "NONE_SET"]:
                  return "0"
              parts = s.split(":")
              if len(parts) == 2:
                  m, s = parts
                  return str(int(m) * 60 + int(s))
              elif len(parts) == 3:
                  h, m, s = parts
                  return str(int(h) * 3600 + int(m) * 60 + int(s))
              return "0"

          with open("full_status.html", "r", encoding="utf-8") as f:
              soup = BeautifulSoup(f, "html.parser")

          testsuites = ET.Element("testsuites")

          for row in soup.find_all("tr"):
              cols = [c.get_text(strip=True) for c in row.find_all("td")]
              if not cols or len(cols) < 2:
                  continue

              name = cols[0]

              # NONE_SET â†’ skipped
              if cols[1] == "NONE_SET":
                  ET.SubElement(
                      testsuites,
                      "testsuite",
                      name=name,
                      tests="0",
                      failures="0",
                      skipped="1",
                      time="0"
                  )
                  continue

              # Parse x/y
              total, passed = 0, 0
              build_status = cols[1]
              if "/" in build_status:
                  left, right = build_status.split("/")
                  passed = int(left)
                  total = int(right.split()[0])

              failures = total - passed if total > 0 else 0
              skipped = 0
              duration = parse_time(cols[2]) if len(cols) > 2 else "0"

              ET.SubElement(
                  testsuites,
                  "testsuite",
                  name=name,
                  tests=str(total),
                  failures=str(failures),
                  skipped=str(skipped),
                  time=duration
              )

          ET.ElementTree(testsuites).write("report.xml", encoding="utf-8", xml_declaration=True)
          EOF

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: report.xml
